# -*- coding: utf-8 -*-
"""Experiment2_HA_Ambiguität_Erichsmeier.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-BylsTqsJxTpmy1yvrOVCokTHjBnUigd
"""

import xml.etree.ElementTree as ET
import random

def parse_ws_collection(xml_file_path, sample_size=5):
    """
    Parst die Winograd-Schemas aus 'WSCollection.xml'.
    1. Liest jedes <schema>-Element.
    2. Rekonstruiert den vollständigen Satz aus <txt1>, <pron>, <txt2>.
    3. Liest die möglichen <answer>-Elemente.
    4. Liest aus <correctAnswer> die richtige Antwort (A/B/C/...).
    5. Gibt eine zufällige Teilmenge (sample_size) zurück.
    """

    # 1) XML-Datei laden und Root-Element ermitteln
    tree = ET.parse(xml_file_path)
    root = tree.getroot()

    # 2) Liste, in der alle gefundenen Schemas gespeichert werden
    results = []

    # 3) Durch alle <schema>-Elemente iterieren
    for schema_el in root.findall('schema'):

        # a) Innerhalb von <schema> die <text>-Sektion finden
        text_el = schema_el.find('text')
        if text_el is None:
            continue

        # b) Innerhalb von <text> die drei relevanten Elemente finden
        #    <txt1>, <pron>, <txt2>
        txt1_el = text_el.find('txt1')
        pron_el = text_el.find('pron')
        txt2_el = text_el.find('txt2')

        # Prüfen, ob sie vorhanden sind
        if txt1_el is None or pron_el is None or txt2_el is None:
            continue

        # Auslesen und Leerzeichen trimmen
        txt1 = txt1_el.text.strip() if txt1_el.text else ""
        pron = pron_el.text.strip() if pron_el.text else ""
        txt2 = txt2_el.text.strip() if txt2_el.text else ""

        # Ganzen Satz zusammensetzen und auf Leerzeichen kontrollieren
        sentence = f"{txt1}{pron}{txt2}"

        # c) <answers> lesen
        answers_el = schema_el.find('answers')
        if answers_el is None:
            continue

        # Liste aller <answer>-Elemente
        answers_list = answers_el.findall('answer')

        # Speichere die Texte der <answer>-Elemente in einer Liste
        possible_answers = []
        for a in answers_list:
            possible_answers.append(a.text.strip())

        # d) <correctAnswer> ermitteln
        correct_ans_el = schema_el.find('correctAnswer')
        if correct_ans_el is None or not correct_ans_el.text:
            continue
        correct_ans_text = correct_ans_el.text.strip()

        # e) Herausfinden, welcher Index
        #    Basierend auf dem ersten Buchstaben/Zeichen
        letter = correct_ans_text[0].upper()
        # Index = "A" -> 0, "B" -> 1, ...
        # ASCII-Trick: ord('A') = 65, ord('B') = 66, ...
        correct_index = ord(letter) - ord('A')

        # f) Prüfen, ob correct_index gültig ist
        if correct_index < 0 or correct_index >= len(possible_answers):
            # falls z. B. mehr Buchstaben als Antworten -> skip
            continue

        # g) Tatsächlich korrekte Antwort
        correct_answer = possible_answers[correct_index]

        # h) Alle Infos in einem Dictionary ablegen
        schema_dict = {
            "full_sentence": sentence,
            "possible_answers": possible_answers,
            "correct_letter": letter,
            "correct_answer": correct_answer,
        }

        results.append(schema_dict)

    # 4) Falls keine Schemas gefunden, abbrechen
    if not results:
        print("Keine passenden Schemata gefunden (oder Tags weichen ab).")
        return []

    # 5) Zufällige Teilmenge ziehen (wenn sample_size > Länge, anpassen)
    sample_size = min(sample_size, len(results))
    subset = random.sample(results, sample_size)

    return subset


if __name__ == "__main__":
    # parse die WSCollection.xml in demselben Ordner
    # und gib 25 zufällige Schemata aus
    xml_path = "WSCollection.xml"
    sampled_schemas = parse_ws_collection(xml_path, sample_size=25)

    # Ausgabe
    for i, schema_data in enumerate(sampled_schemas, start=1):
        print(f"\n=== Winograd-Schema {i} ===")
        print("Satz:       ", schema_data["full_sentence"])
        print("Antworten:  ", schema_data["possible_answers"])
        print("Korrekt (", schema_data["correct_letter"], "):", schema_data["correct_answer"])